// PX to Rem converter
// @param {Number} px dimension
// @param {String} Base size
// @return {String} correct Rem output
@function remedy($pixels, $rem: 16) {
	@return ($pixels / $rem) * 1rem;
}

// Convert a hex value to comma-delimited rgb values
// In: #000
// Out: 0,0,0
@function derive-rgb-values-from-hex($hex) {
	@return red($hex), green($hex), blue($hex);
}

@function line-height-error($value) {
	$errorMessage: "Looks like you passed in a wrong type #{$value} or your base size is not unitless. Either pass in Pixels or Rem";

	@error $errorMessage;
	@return null;
}

@function convert-unit($unit) {
	$default-calc: ($unit * 0 + 1);

	@if unit($unit) == rem {
		@return ($unit / $default-calc * 10);
	}

	@if unit($unit) == px {
		@return ($unit / $default-calc);
	}
}

// Converts relative line heights
// @param {Number} either pixels or rems
// @param {Number} base size needs to be unitless
// @return {Number} proper line height
@function line-height-generator($lh, $size: 16) {
	// If base size has units we need to convert
	@if not unitless($size) {
		$size: convert-unit($size);
	}

	@if type-of($lh) != number {
		@return line-height-error($lh);
	}

	@if unit($lh) == rem {
		// Strips away unit
		@return convert-unit($lh) / $size;
	}

	@if unit($lh) == px {
		// Strips away unit
		@return convert-unit($lh) / $size;
	}
}

// Adding a bunch of CSS Transitions to our Layout
// @param {String} $key - name of the ease
// @return {String} the choosen ease
@function ease($key) {
	@if map-has-key($ease, $key) {
		@return map-get($ease, $key);
	}

	@warn "Unkown '#{$key}' in $ease.";
	@return null;
}

// Fetch nested keys
// @param {Map} $map - Map
// @param {Arglist} $keys - Key chain
// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
	@each $key in $keys {
		$map: map-get($map, $key);
	}
	@return $map;
}

// Displaying SVGs as background out of a map
// @param {Map} $map - name of the map
// @param {String} $key - name of the key
// @return {String} the choosen value
@function svg-as-background($map, $key) {
	@if map-has-key($map, $key) {
		@return map-get($map, $key);
	}

	@warn "Unkown icon: #{$key} in #{$map}.";
	@return null;
}

// Adding flexbile Box Shadow
// @param {Number} $depth - depth level
// @return {List}
@function primary-shadow($depth) {
	$yaxis-offset: nth(1.5 3 8 10 12, $depth) * 1px;
	$blur: nth(1.5 3 10 15 20, $depth) * 3px;
	$color: fade-out(slategrey, nth(0.1 0.4 0.75 0.95, $depth));

	@return 0 $yaxis-offset $blur $color;
}

@function secondary-shadow($depth) {
	$yaxis-offset: nth(1.5 3 8 14 20, $depth) * 1px;
	$blur: nth(1.5 3 8 12 16, $depth) * 3px;
	$color: fade-out(lightgrey, nth(0.25 0.45 0.65 0.85, $depth));

	@return 0 $yaxis-offset $blur $color;
}

@function v($var, $fallback: coral) {
	@return var(--ladon-#{$var}, $fallback);
}
